# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ware_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
from PyQt5.QtWidgets import *
from PyQt5.QtCore import Qt, QThread, QObject, pyqtSignal
from PyQt5.QtGui import QFont, QBrush, QColor
from PyQt5 import QtCore, QtGui, QtWidgets
from gestor import ware_gestor
from gestor import dayly_sales
from inout_dialog import Ui_inoutDialog
import time
import copy


class MyThread(QThread):
    # Create a counter thread
    change_value = pyqtSignal()
    #finished = pyqtSignal(str)
    myValue = True

    def run(self):
        while self.myValue:
            self.change_value.emit()
            time.sleep(0.5)


class Ui_Dialog(QtWidgets.QDialog):
#class Ui_Dialog(object):
    # -----------  constructor  -----------
    def __init__(self, parent = None):
        super(Ui_Dialog, self).__init__(parent)
        self.ware = ware_gestor()
        self.state = "ventas"
        self.table = "main"
        self.count = 0
        self.setupUi()
        self.current_table = []
        self.objDayly = dayly_sales() ## objeto dayly
        # state1 = ventas
        # state2 = in/out
        # -----------  se crea el obejto ingreso/egreso  -----------
        self.dialog = QDialog()
        self.ui_dialog = Ui_inoutDialog(self.dialog)
        #self.ui_dialog = Ui_inoutDialog()
        self.thread = MyThread()
        self.thread.change_value.connect(self.setProgressVal)
        self.init = 0
        self.current_user = None
        

    def show_window(self):
        self.show()

    def startProgressBar(self):
        self.thread.start()

    def upload_quantity(self):
        if self.ui_dialog.button_condition == "aceptar" and self.ui_dialog.criterio == " + ":
            for j in self.ui_dialog.main_table:
                for i in self.ware.ware_list:
                    if i.book.cod == j["cod"]:
                        i.almacen_quantity[0] += j["cantidad"]

        elif self.ui_dialog.button_condition == "aceptar" and self.ui_dialog.criterio == " - ":
            for j in self.ui_dialog.main_table:
                for i in self.ware.ware_list:
                    if i.book.cod == j["cod"]:
                        i.almacen_quantity[0] -= j["cantidad"]
        self.loadData()


    def setProgressVal(self):
        if self.ui_dialog.isVisible():
            self.change_state("in/out")
        else:
            if self.count == 0:
                self.lblAdd.setVisible(False)
                self.thread.myValue = False
                self.change_state("ventas")
                self.upload_quantity()
                self.count += 1

    # -----------  close event configuration  -----------
    def closeEvent(self, event):
        if self.ui_dialog.isVisible():
            ret = QMessageBox.information(self, 'Aviso', "Debe cerrar la ventana entrada/salida")
            event.ignore()
        else:
            self.thread.myValue = False            
            event.accept()


    # -----------  condiciones iniciales al abrir ventana  -----------
    def init_condition(self, user = None):
        # -----------  set item conditions  -----------
        self.current_user = user
        self.cmbSearch.setEnabled(True)
        self.txtSearch.setEnabled(True)
        self.btnBuscar.setEnabled(True)
        item_all = ['cod','isbn','nombre','autor']
        self.cmbSearch.clear()
        self.cmbSearch.addItems(item_all)
        self.cmbSearch.setCurrentIndex(-1)
        self.lblAdd.setVisible(False)

    def changeCurrentDay(self, current_Day = False, current_Id = 0):
        self.current_Day = current_Day
        self.current_Id = current_Id

    # -----------  carga tabla qtableWidget  -----------
    def loadData(self, condition = "main"):
        flag = QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEnabled

        if condition == "main":
            self.real_table = self.ware.ware_list.copy()
        elif condition == "search":
            self.real_table = self.ware.temp_list.copy()
        
        # -----------  esta parte para llenar la tabla  -----------
        row = 0
        self.ware_table.setRowCount(len(self.real_table))

        for ware_li in self.real_table:
            item = QtWidgets.QTableWidgetItem(ware_li.book.cod)
            item.setFlags(flag)
            self.ware_table.setItem(row, 0, item)
            item = QtWidgets.QTableWidgetItem(ware_li.book.isbn)
            item.setFlags(flag)
            self.ware_table.setItem(row, 1, item)
            item = QtWidgets.QTableWidgetItem(ware_li.book.name)
            item.setFlags(flag)
            self.ware_table.setItem(row, 2, item)
            item = QtWidgets.QTableWidgetItem(ware_li.book.autor)
            item.setFlags(flag)
            self.ware_table.setItem(row, 3, item)
            item = QtWidgets.QTableWidgetItem(ware_li.book.editorial)
            item.setFlags(flag)
            self.ware_table.setItem(row, 4, item)
            item = QtWidgets.QTableWidgetItem(str(ware_li.almacen_quantity[0]))
            item.setFlags(flag)
            self.ware_table.setItem(row, 5, item)
            item = QtWidgets.QTableWidgetItem(str(ware_li.almacen_quantity[1]))
            item.setFlags(flag)
            self.ware_table.setItem(row, 6, item)
            row += 1
    
    def buscar(self):

        if str(self.cmbSearch.currentText()) == "" and self.txtSearch.text() != "":
            ret = QMessageBox.information(self, 'Aviso', "Ingresar criterio de busqueda")
        
        elif str(self.cmbSearch.currentText()) == "" and self.txtSearch.text() == "":
            self.table = "main"
            self.loadData("main")
            self.ware_table.setCurrentCell(0,0)
            self.actualizar_img(0)
        else:
            
            if self.txtSearch.text() == "":
                self.table = "main"
                self.loadData("main")
                self.ware_table.setCurrentCell(0,0)
                self.actualizar_img(0)

            elif self.cmbSearch.currentText() == "cod":
                tmp_len = self.ware.buscar("cod",self.txtSearch.text())
                if tmp_len > 0:
                    self.table = "minor"
                    self.loadData("search")
                    self.ware_table.setCurrentCell(0,0)
                    self.actualizar_img(0)
                else:
                    ret = QMessageBox.information(self, 'Aviso', "No existe coincidencias")

            elif self.cmbSearch.currentText() == "isbn":
                tmp_len = self.ware.buscar("isbn",self.txtSearch.text())
                if tmp_len > 0:
                    self.table = "minor"
                    self.loadData("search")
                    self.ware_table.setCurrentCell(0,0)
                    self.actualizar_img(0)
                    if self.state == "in/out":
                        self.txtSearch.setText("")    
                else:
                    if self.state == "in/out":
                        ret = QMessageBox.information(self, 'Aviso', "No existe coincidencias")
                        self.txtSearch.setText("")
                    else:
                        ret = QMessageBox.information(self, 'Aviso', "No existe coincidencias")

                if tmp_len == 1 and self.state == "in/out":
                    self.ui_dialog.add_item(self.ware.temp_list[0])
                    self.txtSearch.setText("")

            elif self.cmbSearch.currentText() == "nombre":
                if self.ware.buscar("nombre",self.txtSearch.text()) > 0:
                    self.table = "minor"
                    self.loadData("search")
                    self.ware_table.setCurrentCell(0,0)
                    self.actualizar_img(0)
                else:
                    ret = QMessageBox.information(self, 'Aviso', "No existe coincidencias")

            elif self.cmbSearch.currentText() == "autor":
                if self.ware.buscar("autor",self.txtSearch.text()) > 0:
                    self.table = "minor"
                    self.loadData("search")
                    self.ware_table.setCurrentCell(0,0)
                    self.actualizar_img(0)
                else:
                    ret = QMessageBox.information(self, 'Aviso', "No existe coincidencias")
                   

    def actualizar_img(self, tmp):
        if (tmp + 1 <= len(self.real_table)) and (tmp >= 0):
            self.lblImg.setPixmap(QtGui.QPixmap("../UI/imgs/books_imgs/" + self.ware_table.item(tmp,0).text() + ".jpg"))
            self.lblImg.setScaledContents(True) 
            self.lbltxtPrecio.setText("S/." + str(self.real_table[tmp].book.Pv))


    # -----------  eventFilter para MouseEvent  -----------
    def eventFilter(self, source, event):
        if self.ware_table.selectedIndexes() != []:
            if event.type() == QtCore.QEvent.MouseButtonRelease:
                if event.button() == QtCore.Qt.LeftButton:
                    temp = self.ware_table.currentRow()
                    self.actualizar_img(temp)
        return QtCore.QObject.event(source, event)


    # -----------  keyPressed for QtableWidget  -----------
    def KeyPressed(self,event):
        if self.ware_table.selectedIndexes() != []:
            temp = self.ware_table.currentRow()
            if event.key() == QtCore.Qt.Key_Up:
                temp -= 1
                self.actualizar_img(temp)
            elif event.key() == QtCore.Qt.Key_Down:
                temp += 1
                self.actualizar_img(temp)
        return QtWidgets.QTableWidget.keyPressEvent(self.ware_table, event)

    
    def vender(self):

        if self.current_Day:
            condicion = [False,False,False]
            ok = False
            val_ = self.tipoVenta()
            tipoVenta = True
            recibo = False
            # Tipo de venta : True: venta en efectivo
            # Tipo de venta : False: venta en visa
            # recibo : True: venta con recibo
            # recibo : True: venta sin recibo
            
            if val_ == 'Efectivo':
                condicion[0] = True
                tipoVenta = True
            elif val_ == 'Visa':
                condicion[0] = True
                tipoVenta = False
            elif val_ == 'Cancel':
                condicion[0] = False


            if condicion[0]:
                ret = QMessageBox.question(self, 'Genesis - [Museo del Libro]', "La venta incluye boleta?", QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel, QMessageBox.Cancel)
                if ret == QMessageBox.Yes:
                    condicion[1] = True
                    recibo = True
                elif ret == QMessageBox.No:
                    condicion[1] = True
                    recibo = False
                else:
                    condicion[1] = False

            
            if condicion[0] and condicion[1]:
                text, ok = QInputDialog.getText(self, 'Genesis - [Museo del Libro]', 'Ingrese cantidad de producto a vender?')
                try:
                    if ok != False:
                        cant = int(text)
                        if cant > 0:
                            condicion[2] = True
                        elif cant < 0:
                            condicion[2] = False
                            QMessageBox.information(self, "ADVERTENCIA", "Debe ingresar un numero positivo")
                        elif cant == 0:
                            condicion[2] = False
                            QMessageBox.information(self, "ADVERTENCIA", "Debe ingresar un valor diferente de cero")
                    else:
                        condicion[1] = False
                except:
                    condicion[2] = False
                    QMessageBox.information(self, 'ADVERTENCIA', "Campo vacio e invalido")

            if condicion[0] and condicion[1] and condicion[2]:
                
                temp = self.ware_table.currentRow()
                #self.current_Id = id del dia presente
                #current_user.id = id de usuario actual
                #self.ware_table.item(temp,0).text() = codigo de libro
                #cant = cantidad
                #tipoventa = efectivo/tarjeta
                #recibo = si la venta incluye recibo o no
                #pv = pv
                #ultimo = nombre del libro
                if temp >= 0:
                    if self.objDayly.update_sales(str(self.ware_table.item(temp,0).text()),cant):
                        bool_ = self.objDayly.registrarVenta(self.current_Id, self.current_user.id, self.ware_table.item(temp,0).text(), cant, tipoVenta, recibo, self.real_table[temp].book.Pv,self.ware_table.item(temp,2).text())
                        ##esta parte de abajo se esta haciendo a la volada
                        if bool_:
                            for i in self.ware.ware_list:
                                if i.book.cod == str(self.ware_table.item(temp,0).text()):
                                    i.almacen_quantity[0] -= cant
                            QMessageBox.information(self, "AVISO", "La venta se registro con exito")
                            self.loadData()
                        else:
                            QMessageBox.information(self, "AVISO", "Error al registrar venta")
                else:
                    QMessageBox.information(self, "AVISO", "Error al registrar venta")
                
            else:
                print("La venta no pudo registrarse")
        else:
            QMessageBox.information(self, "AVISO", "Debe iniciar un nuevo dia de ventas")


    def tipoVenta(self):
        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setText("INGRESE EL MODO DE VENTA")
        msgBox.setWindowTitle("GENESIS - [MUSEO DEL LIBRO]")
        msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        buttonY = msgBox.button(QMessageBox.Ok)
        buttonX = msgBox.button(QMessageBox.Cancel)
        buttonY.setText('EFECTIVO')
        buttonX.setText('TARJETA')
        val = msgBox.exec()
        if val == QMessageBox.Ok:
            return 'Efectivo'
        elif val == QMessageBox.Cancel:
            return 'Visa'
        else:
            return 'Cancel'

    def load_table(self, event):
        self.table = "main"
        self.ware.load_mainlist()
        self.loadData()
        self.ware_table.setCurrentCell(0,0)
        self.actualizar_img(0)

    def change_state(self, state):
        if state == "ventas":
            self.state = "ventas"
            self.top_frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
            self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
        elif state == "in/out":
            self.state = "in/out"
            self.top_frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(22, 136, 126, 255), stop:1 rgba(56, 110, 142, 255));")
            self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(22, 136, 126, 255), stop:1 rgba(56, 110, 142, 255));")    


    def inout_operation(self,event):
        self.change_state("in/out")
        self.lblAdd.setVisible(True)
        self.thread.myValue = True
        self.count = 0
        self.startProgressBar()
        self.ui_dialog.show_window(self.current_user)

    def add_bycod(self,event):
        temp = self.ware_table.currentRow()
        if self.table == "main" and temp >= 0:
            self.ui_dialog.add_item(self.ware.ware_list[temp])
        elif self.table == "minor" and temp >= 0:
            self.ui_dialog.add_item(self.ware.temp_list[temp])
    
    def resizeEvent(self, event):
        if self.init > 0:
            self.frame_2.setGeometry(QtCore.QRect(0, self.frameGeometry().height() - 188 - 40, 1024, 188))
        self.ware_table.setGeometry(QtCore.QRect(0, 130, 1024, self.frameGeometry().height() - (188 + 30 + 100 + 40)))
        self.init += 1
    def setupUi(self):

        self.setObjectName("Dialog")
        self.resize(1024, 668)
        self.setFixedSize(1024, 668)
        self.setMinimumHeight(400)
        self.top_frame = QtWidgets.QFrame(self)
        self.top_frame.setGeometry(QtCore.QRect(0, 0, 1024, 100))
        self.top_frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
        self.top_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.top_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top_frame.setObjectName("top_frame")

        # -----------  search box configuration  -----------
        
        self.search_box = QtWidgets.QGroupBox(self.top_frame)
        self.search_box.setGeometry(QtCore.QRect(20, 10, 621, 81))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.search_box.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.search_box.setFont(font)
        self.search_box.setObjectName("search_box")

        # -----------  txtSearch configuration  -----------
        self.txtSearch = QtWidgets.QLineEdit(self.search_box)
        self.txtSearch.setGeometry(QtCore.QRect(130, 35, 351, 31))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.txtSearch.setFont(font)
        self.txtSearch.setStyleSheet("background-color: rgb(248, 248, 248);")
        self.txtSearch.setClearButtonEnabled(True)
        self.txtSearch.setObjectName("txtSearch")

        # -----------  cmbSearch Configuration  -----------
        self.cmbSearch = QtWidgets.QComboBox(self.search_box)
        #self.cmbSearch.setGeometry(QtCore.QRect(20, 35, 101, 31))
        self.cmbSearch.setGeometry(20, 35, 101, 31)
        self.cmbSearch.setStyleSheet("background-color: rgb(170, 255, 0);")
        font = QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.cmbSearch.setFont(font) 
        self.cmbSearch.setObjectName("cmbSearch")
        
        # -----------  btnBuscar configuration  -----------       
        self.btnBuscar = QtWidgets.QPushButton(self.search_box)
        self.btnBuscar.setGeometry(QtCore.QRect(492, 35, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btnBuscar.setFont(font)
        self.btnBuscar.setStyleSheet("background-color: rgb(240, 240, 240);")
        self.btnBuscar.setObjectName("btnBuscar")
        self.btnBuscar.clicked.connect(self.buscar)

        self.lblLoadTable = QtWidgets.QLabel(self.top_frame)
        self.lblLoadTable.setGeometry(QtCore.QRect(890, 23, 101, 67))
        self.lblLoadTable.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblLoadTable.setText("")
        self.lblLoadTable.setPixmap(QtGui.QPixmap("../UI/imgs/load_.png"))
        self.lblLoadTable.setScaledContents(True)
        self.lblLoadTable.setObjectName("lblLoadTable")
        self.lblLoadTable.mousePressEvent = self.load_table

        
        # -----------  label in/out configuration  -----------
        
        self.label = QtWidgets.QLabel(self.top_frame)
        self.label.setGeometry(QtCore.QRect(770, 20, 98, 72))
        self.label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("../UI/imgs/in_out.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.label.mousePressEvent = self.inout_operation

        # -----------  label Add configuration  -----------
        self.lblAdd = QtWidgets.QLabel(self.top_frame)
        self.lblAdd.setGeometry(QtCore.QRect(680, 22, 65, 61))
        self.lblAdd.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblAdd.setText("")
        self.lblAdd.setPixmap(QtGui.QPixmap("C:/Users/mrojasc/Desktop/ivan/Genesis/PyQT_sistema/UI/imgs/add_.png"))
        self.lblAdd.setScaledContents(True)
        self.lblAdd.setObjectName("lblAdd")
        self.lblAdd.mousePressEvent = self.add_bycod
        

        # -----------  ware_table configuration  -----------
        self.ware_table = QtWidgets.QTableWidget(self)
        self.ware_table.setEditTriggers(QtWidgets.QTreeView.NoEditTriggers) 
        self.ware_table.setGeometry(QtCore.QRect(0, 130, 1024, 450))
        self.ware_table.setMinimumHeight(100) ## esto se agrego
        self.ware_table.setObjectName("ware_table")
        self.ware_table.setColumnCount(7)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.ware_table.setHorizontalHeaderItem(6, item)

        self.ware_table.setColumnWidth(0,80)
        self.ware_table.setColumnWidth(1,120)
        self.ware_table.setColumnWidth(2,360)
        self.ware_table.setColumnWidth(3,167)
        self.ware_table.setColumnWidth(4,164)
        self.ware_table.setColumnWidth(5,47)
        self.ware_table.setColumnWidth(6,58)
        self.ware_table.horizontalHeader().setEnabled(False)
        self.ware_table.setSelectionBehavior(1)
        self.ware_table.setSelectionMode(1)
        self.ware_table.setStyleSheet("selection-background-color: rgb(0, 120, 255);selection-color: rgb(255, 255, 255);")
        self.ware_table.verticalHeader().hide()
        self.ware_table.viewport().installEventFilter(self)
        self.ware_table.keyPressEvent = self.KeyPressed
       
        # -----------  frame configuration  -----------
        self.frame = QtWidgets.QFrame(self)
        self.frame.setGeometry(QtCore.QRect(0, 100, 1024, 30))
        self.frame.setStyleSheet("background-color: rgb(57, 57, 57);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.frame_2 = QtWidgets.QFrame(self)
        width_ = self.frameGeometry().width()
        height__ = self.frameGeometry().height()
        self.frame_2.setGeometry(QtCore.QRect(0, height__ - 188, 1024, 188))
        self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0.298507 rgba(83, 97, 142, 255), stop:1 rgba(97, 69, 128, 255));")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.boxPV = QtWidgets.QGroupBox(self.frame_2)
        self.boxPV.setGeometry(QtCore.QRect(30, 10, 331, 171))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        gradient = QtGui.QLinearGradient(0.0, 1.0, 0.0, 0.0)
        gradient.setSpread(QtGui.QGradient.PadSpread)
        gradient.setCoordinateMode(QtGui.QGradient.ObjectBoundingMode)
        gradient.setColorAt(0.298507, QtGui.QColor(83, 97, 142))
        gradient.setColorAt(1.0, QtGui.QColor(97, 69, 128))
        brush = QtGui.QBrush(gradient)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.boxPV.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.boxPV.setFont(font)
        self.boxPV.setObjectName("boxPV")

        # -----------  lblPV configuration  -----------
        self.lblPV = QtWidgets.QLabel(self.boxPV)
        self.lblPV.setGeometry(QtCore.QRect(160, 20, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.lblPV.setFont(font)
        self.lblPV.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblPV.setObjectName("lblPV")

        # -----------  lblImg configuration  -----------
        self.lblImg = QtWidgets.QLabel(self.boxPV)
        self.lblImg.setGeometry(QtCore.QRect(10, 30, 131, 131))
        self.lblImg.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lblImg.setObjectName("lblImg")

        # -----------  lbltxtPrecio configuration  -----------
        self.lbltxtPrecio = QtWidgets.QLabel(self.boxPV)
        self.lbltxtPrecio.setGeometry(QtCore.QRect(160, 60, 151, 41))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.lbltxtPrecio.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.lbltxtPrecio.setFont(font)
        self.lbltxtPrecio.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lbltxtPrecio.setObjectName("lbltxtPrecio")
        
        # -----------  boton vender  -----------
        self.btnVender = QtWidgets.QPushButton(self.boxPV)
        self.btnVender.setGeometry(QtCore.QRect(160, 117, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.btnVender.setFont(font)
        self.btnVender.setStyleSheet("background-color: rgb(240, 240, 240);")
        self.btnVender.setObjectName("btnVender")
        self.btnVender.clicked.connect(self.vender)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

        # -----------  cargar datos en tabla  -----------
        self.ware.load_mainlist()
        self.loadData()
        self.ware_table.setCurrentCell(0,0)
        self.actualizar_img(0)



    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Dialog", "Almacen - [Museo del libro]"))
        self.search_box.setTitle(_translate("Dialog", "Cuadro de busqueda"))
        self.cmbSearch.setItemText(1, _translate("Dialog", "cod"))
        self.cmbSearch.setItemText(2, _translate("Dialog", "isbn"))
        self.cmbSearch.setItemText(3, _translate("Dialog", "nombre"))
        self.cmbSearch.setItemText(4, _translate("Dialog", "autor"))
        self.cmbSearch.setItemText(5, _translate("Dialog", "editorial"))
        self.btnBuscar.setText(_translate("Dialog", "Buscar"))
        

        font = QtGui.QFont()
        font.setFamily("Open Sans Semibold")
        font.setPointSize(11)
        font.setWeight(85)
        font.setBold(True)

        item = self.ware_table.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "cod"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "isbn"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(2)
        item.setText(_translate("Dialog", "nombre"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(3)
        item.setText(_translate("Dialog", "autor"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(4)
        item.setText(_translate("Dialog", "editorial"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(5)
        item.setText(_translate("Dialog", "[STC]"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))
        item = self.ware_table.horizontalHeaderItem(6)
        item.setText(_translate("Dialog", "[SNTG]"))
        item.setFont(font)
        item.setForeground(QBrush(QColor(0,0,0)))


        self.boxPV.setTitle(_translate("Dialog", "Cuadro de venta"))
        self.lblPV.setText(_translate("Dialog", "P.Venta:"))
        self.lbltxtPrecio.setText(_translate("Dialog", ""))
        self.btnVender.setText(_translate("Dialog", "Vender"))


if __name__ == '__main__':
    
    app = QApplication(sys.argv)
    Dialog = QDialog()
    ui = Ui_Dialog(Dialog)
    ui.init_condition()
    ui.show_window()
    sys.exit(app.exec_())




